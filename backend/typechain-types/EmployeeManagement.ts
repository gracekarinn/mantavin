/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface EmployeeManagementInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addMilestone"
      | "completeTraining"
      | "employees"
      | "milestones"
      | "registerEmployee"
      | "trainings"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EmployeeRegistered"
      | "MilestoneAchieved"
      | "TrainingCompleted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addMilestone",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "completeTraining",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "employees",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "milestones",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerEmployee",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "trainings",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addMilestone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeTraining",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "employees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "milestones", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerEmployee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "trainings", data: BytesLike): Result;
}

export namespace EmployeeRegisteredEvent {
  export type InputTuple = [wallet: AddressLike, profileHash: string];
  export type OutputTuple = [wallet: string, profileHash: string];
  export interface OutputObject {
    wallet: string;
    profileHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MilestoneAchievedEvent {
  export type InputTuple = [employee: AddressLike, milestoneId: BigNumberish];
  export type OutputTuple = [employee: string, milestoneId: bigint];
  export interface OutputObject {
    employee: string;
    milestoneId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TrainingCompletedEvent {
  export type InputTuple = [employee: AddressLike, trainingId: BytesLike];
  export type OutputTuple = [employee: string, trainingId: string];
  export interface OutputObject {
    employee: string;
    trainingId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EmployeeManagement extends BaseContract {
  connect(runner?: ContractRunner | null): EmployeeManagement;
  waitForDeployment(): Promise<this>;

  interface: EmployeeManagementInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addMilestone: TypedContractMethod<
    [_description: string],
    [bigint],
    "nonpayable"
  >;

  completeTraining: TypedContractMethod<
    [_trainingId: BytesLike],
    [void],
    "nonpayable"
  >;

  employees: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint, boolean] & {
        wallet: string;
        profileHash: string;
        joinDate: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  milestones: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, boolean] & {
        id: bigint;
        description: string;
        timestamp: bigint;
        verified: boolean;
      }
    ],
    "view"
  >;

  registerEmployee: TypedContractMethod<
    [_wallet: AddressLike, _profileHash: string],
    [void],
    "nonpayable"
  >;

  trainings: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, bigint, boolean] & {
        id: string;
        name: string;
        deadline: bigint;
        mandatory: boolean;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addMilestone"
  ): TypedContractMethod<[_description: string], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "completeTraining"
  ): TypedContractMethod<[_trainingId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "employees"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint, boolean] & {
        wallet: string;
        profileHash: string;
        joinDate: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "milestones"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, boolean] & {
        id: bigint;
        description: string;
        timestamp: bigint;
        verified: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerEmployee"
  ): TypedContractMethod<
    [_wallet: AddressLike, _profileHash: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "trainings"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, bigint, boolean] & {
        id: string;
        name: string;
        deadline: bigint;
        mandatory: boolean;
      }
    ],
    "view"
  >;

  getEvent(
    key: "EmployeeRegistered"
  ): TypedContractEvent<
    EmployeeRegisteredEvent.InputTuple,
    EmployeeRegisteredEvent.OutputTuple,
    EmployeeRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "MilestoneAchieved"
  ): TypedContractEvent<
    MilestoneAchievedEvent.InputTuple,
    MilestoneAchievedEvent.OutputTuple,
    MilestoneAchievedEvent.OutputObject
  >;
  getEvent(
    key: "TrainingCompleted"
  ): TypedContractEvent<
    TrainingCompletedEvent.InputTuple,
    TrainingCompletedEvent.OutputTuple,
    TrainingCompletedEvent.OutputObject
  >;

  filters: {
    "EmployeeRegistered(address,string)": TypedContractEvent<
      EmployeeRegisteredEvent.InputTuple,
      EmployeeRegisteredEvent.OutputTuple,
      EmployeeRegisteredEvent.OutputObject
    >;
    EmployeeRegistered: TypedContractEvent<
      EmployeeRegisteredEvent.InputTuple,
      EmployeeRegisteredEvent.OutputTuple,
      EmployeeRegisteredEvent.OutputObject
    >;

    "MilestoneAchieved(address,uint256)": TypedContractEvent<
      MilestoneAchievedEvent.InputTuple,
      MilestoneAchievedEvent.OutputTuple,
      MilestoneAchievedEvent.OutputObject
    >;
    MilestoneAchieved: TypedContractEvent<
      MilestoneAchievedEvent.InputTuple,
      MilestoneAchievedEvent.OutputTuple,
      MilestoneAchievedEvent.OutputObject
    >;

    "TrainingCompleted(address,bytes32)": TypedContractEvent<
      TrainingCompletedEvent.InputTuple,
      TrainingCompletedEvent.OutputTuple,
      TrainingCompletedEvent.OutputObject
    >;
    TrainingCompleted: TypedContractEvent<
      TrainingCompletedEvent.InputTuple,
      TrainingCompletedEvent.OutputTuple,
      TrainingCompletedEvent.OutputObject
    >;
  };
}
